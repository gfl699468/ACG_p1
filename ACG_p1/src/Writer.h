#pragma once
#include "HalfEdge.h"
#include "Vertex.h"
#include "Face.h"
#include <string>
#include <map>
#include <iostream>
#include <list>

using namespace std;

inline basic_ostream<char, char_traits<char>> &operator<< (basic_ostream<char, char_traits<char>> &output, const tuple<double, double, double> &d) {
	output << get<0>(d) << " " << get<1>(d) << " " << get<2>(d);
	return output;
}

class Writer
{
public:
	inline void writeVRMLFile(string filename, map<pair<int, int>, HalfEdge> halfEdge_map, map<int, Vertex>vertex, map<int, Face> face) {
		ofstream fs(filename);
		fs << "#VRML V2.0 utf8 Generated by Celr" << endl;
		fs << "Shape {" << endl;
		fs << "\tgeometry IndexedFaceSet {" << endl;
		fs << "\t\tcoord Coordinate {" << endl;
		fs << "\t\t\tpoint [" << endl;
		for (size_t i = 0; i < vertex.size(); i++)
		{
			fs << "\t\t\t\t" << vertex[i].pos << endl;
		}
		fs << "\t\t\t]" << endl;
		fs << "\t\t}" << endl;
		fs << "\t\tcoordIndex [" << endl;
		for (size_t i = 0; i < face.size(); i++)
		{
			auto ed = face[i].corHalfEdge;
			fs << "\t\t\t" << halfEdge_map[ed].oriVertex << " " << halfEdge_map[halfEdge_map[ed].nextHalfEdge].oriVertex << " " << halfEdge_map[halfEdge_map[ed].prevHalfEdge].oriVertex << " " << "-1" << endl;
		}
		fs << "\t\t]" << endl;
		fs << "\t}" << endl;
		fs << "}" << endl;
	}
};